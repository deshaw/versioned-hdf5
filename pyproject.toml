[build-system]
requires = [
    "meson-python",
    "setuptools_scm",
    "Cython >= 3.0.10",
    "numpy",
]
build-backend = "mesonpy"

[project]
name = "versioned-hdf5"
dynamic = ["version"]
authors = [
  { name="Quansight" },
]
description = "Versioned HDF5 provides a versioned abstraction on top of h5py"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
]
dependencies = [
    "numpy",
    "h5py",
    "ndindex>=1.5.1",
]
urls = { Homepage = "https://github.com/deshaw/versioned-hdf5" }
license = { file = 'LICENSE' }

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8 naming
    "N",
    # pydocstyle
    "D",
    # annotations
    "ANN",
    # debugger
    "T10",
    # flake8-pytest
    "PT",
    # flake8-return
    "RET",
    # flake8-unused-arguments
    "ARG",
    # flake8-fixme
    "FIX",
    # flake8-eradicate
    "ERA",
    # pandas-vet
    "PD",
    # numpy-specific rules
    "NPY",
]
ignore = [
    "D104", # Missing docstring in public package
    "D100", # Missing docstring in public module
    "D211", # No blank line before class
    "D213", # Multiline summary second line
    "PD901", # Avoid using 'df' for pandas dataframes. Perfectly fine in functions with limited scope
    "ANN201", # Missing return type annotation for public function (makes no sense for NoneType return types...)
    "ANN101", # Missing type annotation for `self`
    "ANN204", # Missing return type annotation for special method
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "D105", # Missing docstring in magic method
    "D203", # 1 blank line before after class docstring
    "D204", # 1 blank line required after class docstring
    "D413", # 1 black line after parameters
    "SIM108", # Simplify if/else to one line; not always clearer
    "D206", # Docstrings should be indented with spaces; unnecessary when running ruff-format
    "E501", # Line length too long; unnecessary when running ruff-format
    "W191", # Indentation contains tabs; unnecessary when running ruff-format
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["ANN001"]

[project.optional-dependencies]
dev = ["pre-commit>=3.6.0", 'cython', 'meson-python', 'setuptools-scm']
test = ["pytest", "pytest-env", "hypothesis", "packaging"]
doc = ["sphinx", "sphinx-multiversion", "myst-parser"]
bench = ["asv"]

[tool.setuptools_scm]

[tool.isort]
profile = "black"

[tool.pytest_env]
ENABLE_CHUNK_REUSE_VALIDATION = 1

[tool.pytest.ini_options]
addopts = "--doctest-modules --ignore=analysis/ --import-mode=importlib"
doctest_optionflags = "NORMALIZE_WHITESPACE"
markers = [
    "setup_args : kwargs for setup fixture.",
    "slow: slow tests",
]

[tool.mypy]
allow_incomplete_defs = true  # FIXME
allow_untyped_decorators = true  # FIXME
allow_untyped_defs = true  # FIXME
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
plugins = "numpy.typing.mypy_plugin"

[[tool.mypy.overrides]]
module = ["*.tests.*"]
allow_untyped_defs = true
