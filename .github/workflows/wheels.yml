name: Build wheels

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      os:
        required: true
        type: string
      arch:
        required: true
        type: string

jobs:
  build-wheels:
    name: 'Build wheel'
    runs-on: ${{ inputs.os }}
    steps:
    - name: Check out the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # get the non-merge commit for PRs
        fetch-tags: true # include tags to get correct version from setuptools_scm

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    # MacOS environment setup
    # libz and libhdf5 require MacOS>=14.0
    - name: Update env variables on macos
      if: runner.os == 'macOS'
      run: |
        echo "CPATH=$(python -c 'import sysconfig; print(sysconfig.get_path("include"))'):$CPATH" >> $GITHUB_ENV
    - name: Run cibw_before_all_macos
      if: runner.os == 'macOS'
      run: bash ./ci/cibw_before_all_macos.sh "${{ github.workspace }}"

    # Build the wheels
    - name: Triage the build
      run: bash ./ci/triage_build.sh "${{ inputs.arch }}" "${{ github.event.pull_request.head.sha || github.sha }}" "${{ inputs.python-version }}"

    - name: Run cibuildwheel
      uses: pypa/cibuildwheel@v2.22.0
      env:
        # Note that tool.cibuildwheel "skip" in pyproject.toml also limits what gets built
        CIBW_ARCHS: ${{ inputs.arch }}
        CIBW_BUILD: ${{ env.CIBW_BUILD }}
        CIBW_SKIP: ${{ env.CIBW_SKIP }}
        CIBW_BEFORE_BUILD: ${{ env.CIBW_BEFORE_BUILD }}
        CIBW_BUILD_FRONTEND: ${{ env.CIBW_BUILD_FRONTEND }}
        CIBW_PRERELEASE_PYTHONS: ${{ env.CIBW_PRERELEASE_PYTHONS }}
        CIBW_BEFORE_BUILD_LINUX: yum install -y zlib-devel
        CIBW_ENVIRONMENT_MACOS: >
          CPATH="$HDF5_DIR/include:$CPATH"
          PKG_CONFIG_PATH="$HDF5_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
          auditwheel repair -w {dest_dir} {wheel} -L /../h5py.libs
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
          delocate-wheel --require-archs {delocate_archs}
          -w {dest_dir} -v {wheel} -L ../h5py/.dylibs

    # Remove spurious libraries added by auditwheels/delocate in the repair step
    - name: Remove embedded libhdf5 (Linux)
      if: runner.os == 'Linux'
      run: zip -d ./wheelhouse/*.whl 'h5py.libs/*'
    - name: Remove embedded libhdf5 (MacOS)
      if: runner.os == 'macOS'
      run: zip -d ./wheelhouse/*.whl 'h5py/*'
    - name: Remove h5py DLLs from RECORD
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        cd wheelhouse
        unzip *.whl '*/RECORD'
        echo "Removing lines:"
        sed -n '/^h5py/p' */RECORD
        # No sed -i available on MacOS
        sed '/^h5py/d' */RECORD > RECORD.new
        mv -v RECORD.new */RECORD
        zip *.whl */RECORD

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ inputs.os }}-${{inputs.arch}}-${{ inputs.python-version }}
        path: ./wheelhouse/*.whl

  # Start again from a clean environment.
  # pip install the wheel and run a subset of the unit tests.
  smoke-test:
    name: 'Smoke test'
    needs: [build-wheels]
    runs-on: ${{ inputs.os }}
    steps:

    - name: Check out the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # get the non-merge commit for PRs
        fetch-tags: true # include tags to get correct version from setuptools_scm

    - name: Prevent accidentally testing repository package
      run: rm -r versioned_hdf5

    - name: Retrieve wheel
      uses: actions/download-artifact@v4
      with:
        name: wheels-${{ inputs.os }}-${{inputs.arch}}-${{ inputs.python-version }}
        merge-multiple: true  # Don't unzip into subdirectory
        path: wheels/

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install dependencies for smoke tests
      run: pip install pytest pytest-env hypothesis packaging psutil

    # Note: this pulls in the h5py wheel from pypi, which embeds libhdf5.
    - name: Install package for smoke tests
      shell: bash
      run: pip install -v ./wheels/*.whl

    - name: Test import h5py
      run: python -c 'import h5py; print(h5py.version.info)'

    - name: Test import versioned_hdf5
      run: python -c 'import versioned_hdf5; print(versioned_hdf5.__version__)'

    - name: Print hdf5 install path
      run: |
        python utils/debug_libhdf5_so.py h5py
        python utils/debug_libhdf5_so.py versioned_hdf5

    - name: Run smoke tests
      run: pytest -m 'api and not slow'

    - name: pip uninstall
      run: pip uninstall -y versioned-hdf5

    - name: Retest h5py after uninstalling versioned-hdf5
      run: python -c 'import h5py; print(h5py.version.info)'
