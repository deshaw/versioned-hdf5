name: Release Python Bindings to PyPI

on:
  release:
    types: [published]
  pull_request:
  workflow_dispatch:
    inputs:
      test_pypi:
        type: boolean
        description: 'Test release: publish on test.pypi.org'
        default: false

jobs:
  build-sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - name: 💻 Checkout the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true # include tags to get correct version from setuptools_scm

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5

      - name: 🚀 Install build dependencies
        run: |
          sudo apt install -y libhdf5-dev build-essential
          pip install build twine

      - name: 📦 Build the sdist and wheel
        run: |
          python -m build --sdist -o wheelhouse

      - name: List and check sdist
        run: |
          ls -lh wheelhouse/
          twine check wheelhouse/*

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: ./wheelhouse/*.tar.gz

  build-wheels:
    name: 'Wheels: ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.python-version }}'
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-14, macos-13, windows-latest]
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
          - os: windows-latest
            arch: AMD64
          - os: macos-14
            arch: arm64
          - os: macos-13
            arch: x86_64
    steps:
    - name: Check out the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # get the non-merge commit for PRs
        fetch-tags: true # include tags to get correct version from setuptools_scm

    # MacOS environment setup
    # libz and libhdf5 require MacOS>=14.0
    - name: Update env variables on macos
      if: runner.os == 'macOS'
      run: |
        echo "CPATH=$(python -c 'import sysconfig; print(sysconfig.get_path("include"))'):$CPATH" >> $GITHUB_ENV
        echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
    - name: Run cibw_before_all_macos
      if: runner.os == 'macOS'
      run: |
        bash ./ci/cibw_before_all_macos.sh "${{ github.workspace }}"

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # Windows environment setup
    - name: Set up nuget
      if: runner.os == 'Windows'
      uses: nuget/setup-nuget@v2
    - name: Run cibw_before_all_windows
      if: runner.os == 'Windows'
      run: |
        bash ./ci/cibw_before_all_windows.sh "${{ github.workspace }}"
    - name: Print environment info
      id: envdata
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo $PATH
        echo $PKG_CONFIG_PATH

        # Inject zlib library paths into github context so we can pass
        # it to meson; replace any backslashes with forward slashes
        echo "ZLIB_PATH=$(echo $ZLIB_ROOT | sed 's/\\/\//g')/lib_release" >> $GITHUB_OUTPUT

    # Build the wheels
    - name: Triage the build
      run: bash ./ci/triage_build.sh "${{ matrix.arch }}" "${{ github.event.pull_request.head.sha || github.sha }}" "${{ matrix.python-version }}"
    - name: Run cibuildwheel
      uses: pypa/cibuildwheel@v2.22.0
      env:
        # Note that tool.cibuildwheel "skip" in pyproject.toml also limits what gets built
        CIBW_ARCHS: ${{ matrix.arch }}
        CIBW_BUILD: ${{ env.CIBW_BUILD }}
        CIBW_SKIP: ${{ env.CIBW_SKIP }}
        CIBW_BEFORE_BUILD: ${{ env.CIBW_BEFORE_BUILD }}
        CIBW_BUILD_FRONTEND: ${{ env.CIBW_BUILD_FRONTEND }}
        CIBW_PRERELEASE_PYTHONS: ${{ env.CIBW_PRERELEASE_PYTHONS }}
        CIBW_BEFORE_BUILD_LINUX: yum install -y zlib-devel
        CIBW_ENVIRONMENT_MACOS: CPATH=$HDF5_DIR/include:$CPATH
        CIBW_ENVIRONMENT_WINDOWS: >
          CPATH="$HDF5_DIR/include;$CPATH"
          LIBRARY_PATH="$HDF5_DIR/lib;$LIBRARY_PATH"
          PATH="$PKGCONFBIN;$PATH"

        # Must use paths relative to the source root here: meson rejects absolute paths
        CIBW_CONFIG_SETTINGS_WINDOWS: >
          setup-args="--vsenv"
          setup-args="-Dzlib_libs=['${{ steps.envdata.outputs.ZLIB_PATH }}']"

    - name: Run smoke tests
      shell: bash
      run: |
        rm -rf ./vcpkg # In case we are running on windows; vcpkg comes with python tests we don't want to run
        pip install -v pytest pytest-env hypothesis packaging
        pip install -v ./wheelhouse/*.whl --force-reinstall
        pytest -m 'api and not slow'

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
        path: ./wheelhouse/*.whl

  publish:
    name: Publish Python packages on PyPI
    if: (github.event_name == 'release' && startsWith(github.ref, 'refs/tags')) || (github.event_name == 'workflow_dispatch')
    needs: [build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/versioned-hdf5
    permissions:
      id-token: write
    steps:
      - name: Retrieve wheels and sdist
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: wheels/

      - name: print artifacts
        run: |
          ls -l wheels/

      - name: 🧪 Publish to PyPI Testing
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ inputs.test_pypi }}
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: wheels

      - name: 🎉 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ !inputs.test_pypi }}
        with:
          packages-dir: wheels
